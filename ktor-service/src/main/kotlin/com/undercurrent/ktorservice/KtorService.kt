/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.undercurrent.ktorservice

import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.engine.*
import io.ktor.server.netty.*
import io.ktor.server.plugins.callloging.*
import io.ktor.server.plugins.contentnegotiation.*
import io.ktor.server.request.*
import io.ktor.server.response.*
import io.ktor.server.routing.*

fun startKtorService() {
    embeddedServer(Netty, port = 8080) {
        install(ContentNegotiation)
        install(CallLogging)
        routing {
            post("/echo") {
                val receivedText = call.receiveText()
                call.respondText("Echo: $receivedText", ContentType.Text.Plain)
                println("Echo: $receivedText")
            }
            post("/inbound") {
                val receivedText = call.receiveText()
                call.respondText("INBOUND: $receivedText", ContentType.Text.Plain)
                println("INBOUND: $receivedText")
                KtorInboundService().saveInbound(receivedText)
            }
//            post("/{environment}/{role}") {
//                val environment = call.parameters["environment"]
//                val role = call.parameters["role"]
//
//                // Process the request based on the environment and role
//                when {
//                    environment == "dev" && role == "admin" -> {
//                        // Handle /dev/admin requests
//                    }
//                    environment == "dev" && role == "vendor" -> {
//                        // Handle /dev/vendor requests
//                    }
//                    environment == "test" && role == "admin" -> {
//                        // Handle /test/admin requests
//                    }
//                    environment == "test" && role == "vendor" -> {
//                        // Handle /test/vendor requests
//                    }
//                    else -> {
//                        // Handle other cases or return a 404 response
//                        call.respond(HttpStatusCode.NotFound)
//                    }
//                }
//            }
        }
    }.start(wait = true)
}
